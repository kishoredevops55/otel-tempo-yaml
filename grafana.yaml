apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: grafana
    spec:
      containers:
        - 
          env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: Admin
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
          image: grafana/grafana:7.4.0-ubuntu
          name: grafana
          ports:
            - containerPort: 3000
          resources: {}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: grafana-claim0
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-claim1
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-claim1
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: grafana-claim0
          hostPath:
            path: /root/boot-opentelemetry-tempo/data/grafana-data/datasources 
        - name: grafana-claim1
          hostPath:
            path: /root/boot-opentelemetry-tempo/data/grafana-data/dashboards-provisioning
        - name: grafana-claim2
          hostPath:
            path: /root/boot-opentelemetry-tempo/data/grafana-data/dashboards         
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3000"
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}